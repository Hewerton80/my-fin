// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum PaymantType {
    CREDIT_CARD
    DEBIT_CARD
    CASH
    PIX
}

enum Frequency {
    DO_NOT_REPEAT
    DAILY
    MONTHLY
    YEARLY
}

enum TransitionType {
    PAYMENT
    RECEIPT
}

enum ExpenseStatus {
    OVERDUE
    PENDING
    ON_DAY
    PAID
    CANCELED
}

enum TransitionHistoryStatus {
    OVERDUE
    PENDING
    ON_DAY
    PAID
    CANCELED
}

enum TransitionHistoryFrequency {
    DO_NOT_REPEAT
    MONTHLY
}

enum TransitionHistoryPaymantType {
    CREDIT_CARD
    DEBIT_CARD
    CASH
    PIX
    BANK_TRANSFER
}

model User {
    id                String              @id @default(cuid())
    email             String              @unique
    name              String
    password          String
    avatarBgColor     String
    createdAt         DateTime            @default(now())
    expenses          Expense[]
    creditCards       CreditCard[]
    TransitionHistory TransitionHistory[]
}

model Expense {
    id                 String              @id @default(cuid())
    name               String
    description        String?
    amount             Float?
    isPaid             Boolean             @default(false)
    status             ExpenseStatus?
    dueDate            DateTime?
    registrationDate   DateTime?
    creditCardId       String?
    userId             String
    frequency          Frequency?
    totalInstallments  Int?
    currentInstallment Int?
    user               User                @relation(fields: [userId], references: [id])
    paymentType        PaymantType
    creditCard         CreditCard?         @relation(fields: [creditCardId], references: [id])
    createdAt          DateTime            @default(now())
    transitionHistory  TransitionHistory[]
    category           Category?           @relation(fields: [categoryId], references: [id])
    categoryId         String?
}

model CreditCard {
    id                String              @id @default(cuid())
    iconName          String?
    color             String?
    name              String
    dueDay            Int
    invoiceClosingDay Int
    createdAt         DateTime            @default(now())
    userId            String
    user              User                @relation(fields: [userId], references: [id])
    expenses          Expense[]
    TransitionHistory TransitionHistory[]
}

model GroupCategory {
    id          String     @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime   @default(now())
    categories  Category[]
}

model Category {
    id                String              @id @default(cuid())
    name              String
    description       String?
    iconName          String?
    groupCategory     GroupCategory       @relation(fields: [groupCategoryId], references: [id])
    groupCategoryId   String
    createdAt         DateTime            @default(now())
    expenses          Expense[]
    TransitionHistory TransitionHistory[]
}

model TransitionHistory {
    id                 String                        @id @default(cuid())
    name               String?
    amount             Float?
    totalInstallments  Int?
    currentInstallment Int?
    status             TransitionHistoryStatus?      @default(PAID)
    frequency          TransitionHistoryFrequency?
    category           Category?                     @relation(fields: [categoryId], references: [id])
    categoryId         String?
    paymentType        TransitionHistoryPaymantType?
    creditCardId       String?
    creditCard         CreditCard?                   @relation(fields: [creditCardId], references: [id])
    type               TransitionType                @default(PAYMENT)
    expenseId          String?
    expense            Expense?                      @relation(fields: [expenseId], references: [id])
    userId             String?
    user               User?                         @relation(fields: [userId], references: [id])
    referenceMonth     DateTime?                     @db.Date
    registrationDate   DateTime?
    dueDate            DateTime?
    paidAt             DateTime?
    createdAt          DateTime                      @default(now())
}
